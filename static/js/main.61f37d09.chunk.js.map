{"version":3,"sources":["assets/images/scarecrow.png","components/TitlePage/TitlePage.component.js","components/Button/Button.component.js","components/ContentBody/ContentBody.component.js","components/Copyright/Copyright.component.js","components/App/App.component.js","serviceWorker.js","index.js"],"names":["module","exports","TitlePage","title","className","Button","text","url","href","ContentBody","contentBody","Copyright","App","src","ScareCrow","alt","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,uC,oOCGpC,SAASC,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC1B,OAAO,wBAAIC,UAAU,SAASD,EAAvB,K,YCDF,SAASE,EAAT,GAAgC,IAAdC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IAC7B,OACE,uBAAGC,KAAMD,EAAKH,UAAU,kBACrBE,GCFA,SAASG,EAAT,GAA8C,IAAvBN,EAAsB,EAAtBA,MAAOO,EAAe,EAAfA,YACnC,OACE,6BACE,wBAAIN,UAAU,cAAcD,GAC5B,uBAAGC,UAAU,gBAAgBM,EAA7B,KACA,kBAACL,EAAD,CAAQE,IAAI,IAAID,KAAK,sB,YCNpB,SAASK,IACd,OACE,uBAAGP,UAAU,kBAAb,cACa,uBAAGI,KAAK,+BAAR,YADb,uB,oBCEG,SAASI,IACd,OACE,yBAAKR,UAAU,eACb,gCACE,kBAACF,EAAD,CAAWC,MAAM,mBAEnB,0BAAMC,UAAU,aACd,yBAAKA,UAAU,cACb,yBACES,IAAKC,IACLC,IAAI,YACJC,MAAM,MACNC,OAAO,MACPb,UAAU,qBAGd,yBAAKA,UAAU,gBACb,kBAACK,EAAD,CACEN,MAAM,0BACNO,YAAY,kFAKlB,gCACE,kBAACC,EAAD,QCpBYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACb,EAAD,OAEFc,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61f37d09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scarecrow.3ea4c985.png\";","import React from \"react\";\nimport \"./TitlePage.styles.scss\";\n\nexport function TitlePage({ title }) {\n  return <h1 className=\"title\">{title} </h1>;\n}\n","import React from \"react\";\nimport \"./Button.styles.scss\";\n\nexport function Button({ text, url }) {\n  return (\n    <a href={url} className=\"go-back-button\">\n      {text}\n    </a>\n  );\n}\n","import React from \"react\";\nimport \"./ContentBody.styles.scss\";\nimport { Button } from \"../Button/Button.component\";\n\nexport function ContentBody({ title, contentBody }) {\n  return (\n    <div>\n      <h2 className=\"body-title\">{title}</h2>\n      <p className=\"content-text\">{contentBody} </p>\n      <Button url=\"/\" text=\"Back to homepage\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Copyright.styles.scss\";\n\nexport function Copyright() {\n  return (\n    <p className=\"copyright-text\">\n      created by <a href=\"https://silpagui.github.io/\">silpagui</a> -\n      devChallenges.io\n    </p>\n  );\n}\n","import React from \"react\";\nimport { TitlePage } from \"../TitlePage/TitlePage.component\";\nimport { ContentBody } from \"../ContentBody/ContentBody.component\";\nimport \"./App.styles.scss\";\nimport { Copyright } from \"../Copyright/Copyright.component\";\nimport ScareCrow from \"../../assets/images/scarecrow.png\";\n\nexport function App() {\n  return (\n    <div className=\"app-wrapper\">\n      <header>\n        <TitlePage title=\"404 NOT FOUND\" />\n      </header>\n      <main className=\"main-body\">\n        <div className=\"main-image\">\n          <img\n            src={ScareCrow}\n            alt=\"scarecrow\"\n            width=\"286\"\n            height=\"238\"\n            className=\"scarecrow-image\"\n          />\n        </div>\n        <div className=\"main-content\">\n          <ContentBody\n            title=\"I have bad news for you\"\n            contentBody=\"The page you are looking for might be removed or is temporarily\n        unavailable\"\n          />\n        </div>\n      </main>\n      <footer>\n        <Copyright />\n      </footer>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App/App.component\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}